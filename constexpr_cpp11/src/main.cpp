#include <iostream>

/// 所谓常量表达式，指的就是由多个（≥1）常量组成的表达式。换句话说，如果表达式中的成员都是常量，那么该表达式就是一个常量表达式。
/// 这也意味着，常量表达式一旦确定，其值将无法修
/// 常量表达式的应用场景还有很多，比如匿名枚举、switch-case 结构中的 case 表达式等，感兴趣的读者可自行编码测试，这里不再过多举例。
///
/// constexpr 关键字的功能是使指定的常量表达式获得在程序编译阶段计算出结果的能力，而不必等到程序运行阶段。
/// C++ 11 标准中，constexpr 可用于修饰普通变量、函数（包括模板函数）以及类的构造函数
///
/// constexpr 还可以用于修饰函数的返回值，这样的函数又称为“常量表达式函数”
/// 1) 整个函数的函数体中，除了可以包含 using 指令、typedef 语句以及 static_assert 断言外，只能包含一条 return 返回语句
/// 2) 该函数必须有返回值，即函数的返回值类型不能是 void
/// 3) 函数在使用之前，必须有对应的定义语句。
/// 4) return 返回的表达式必须是常量表达式
///
/// C++11 语法中，constexpr 可以修饰模板函数，但由于模板中类型的不确定性，因此模板函数实例化后的函数是否符合常量表达式函数的要求也是不确定的
/// 如果 constexpr 修饰的模板函数实例化结果不满足常量表达式函数的要求，则 constexpr 会被自动忽略，即该函数就等同于一个普通函数
///
/// const 用于为修饰的变量添加“只读”属性；（其值可能通过另外的方法修改）
/// 而 constexpr 关键字则用于指明其后是一个常量（或者常量表达式），
/// 编译器在编译程序时可以顺带将其结果计算出来，而无需等到程序运行阶段，这样的优化极大地提高了程序的执行效率。


using namespace std;
//普通函数的声明
int noconst_dis(int x);
//常量表达式函数的声明
constexpr int display(int x);
//常量表达式函数的定义
constexpr int display(int x){
    return 1 + 2 + x;
}
int main()
{
    //调用常量表达式函数
    int a[display(3)] = { 1,2,3,4 };
    cout << a[2] << endl;
    //调用普通函数
    cout << noconst_dis(3) << endl;
    return 0;
}
//普通函数的定义
int noconst_dis(int x) {
    return 1 + 2 + x;
}
